CREATE DATABASE Book_Management;

USE Book_Management;

CREATE TABLE BOOK (
    ID_BOOK INT AUTO_INCREMENT,
    BOOK_TITLE NVARCHAR(70),
    CATEGORY NVARCHAR(50),
    AUTHOR NVARCHAR(30),
    QUANTITY INT,
    PRICE DECIMAl(10,2),
    
    CONSTRAINT PK_BOOK PRIMARY KEY (ID_BOOK)
);

CREATE TABLE CUSTOMER (
    ID_CUSTOMER INT AUTO_INCREMENT,
    FULL_NAME NVARCHAR(30),
    ADDRESS NVARCHAR(50),
    PHONE VARCHAR(10),
    EMAIL VARCHAR(50),
    DEBT DECIMAL(10,2),
    CONSTRAINT PK_CUSTOMER PRIMARY KEY (ID_CUSTOMER)
);

CREATE TABLE STOCK_RECEIPT (
    ID_STOCK_RECEIPT VARCHAR(6),
    RECEIPT_DATE DATE,
    CONSTRAINT PK_STOCK_RECEIPT PRIMARY KEY (ID_STOCK_RECEIPT)
);

CREATE TABLE STOCK_RECEIPT_DETAILS (
    ID_STOCK_RECEIPT VARCHAR(6),
    ID_BOOK INT,
    QUANTITY INT,
    CONSTRAINT PK_STOCK_RECEIPT_DETAILS PRIMARY KEY (ID_STOCK_RECEIPT, ID_BOOK),
    CONSTRAINT FK_STOCK_RECEIPT_DETAILS_STOCK_RECEIPT FOREIGN KEY (ID_STOCK_RECEIPT) REFERENCES STOCK_RECEIPT(ID_STOCK_RECEIPT),
    CONSTRAINT FK_STOCK_RECEIPT_DETAILS_BOOK FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID_BOOK)
);

CREATE TABLE INVOICE (
    ID_INVOICE VARCHAR(6),
    ID_CUSTOMER INT,
    INVOICE_DATE DATE, 
    CONSTRAINT PK_INVOICE PRIMARY KEY (ID_INVOICE)
);

CREATE TABLE INVOICE_DETAILS (
    ID_INVOICE VARCHAR(6),
    ID_BOOK INT,
    QUANTITY INT,
    UNIT_PRICE DECIMAL(10,2),
    CONSTRAINT PK_INVOICE_DETAILS PRIMARY KEY (ID_INVOICE, ID_BOOK),
    CONSTRAINT FK_INVOICE_DETAILS_INVOICE FOREIGN KEY (ID_INVOICE) REFERENCES INVOICE(ID_INVOICE),
    CONSTRAINT FK_INVOICE_DETAILS_BOOK FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID_BOOK)
);

DROP TABLE IF EXISTS PAYMENT_RECEIPT; 

CREATE TABLE PAYMENT_RECEIPT (
    ID_PAYMENT_RECEIPT VARCHAR(6),
    ID_CUSTOMER INT,
    PAYMENT_DATE DATE,
    AMOUNT_RECEIVED DECIMAL(10,2),
    CONSTRAINT PK_PAYMENT_RECEIPT PRIMARY KEY (ID_PAYMENT_RECEIPT),
    CONSTRAINT FK_CUSTOMER FOREIGN KEY (ID_CUSTOMER) REFERENCES CUSTOMER(ID_CUSTOMER)
);

CREATE TABLE STOCK_REPORT (
    ID_STOCK_REPORT VARCHAR(6),
    REPORT_DATE DATE,
    CONSTRAINT PK_STOCK_REPORT PRIMARY KEY (ID_STOCK_REPORT)
);

CREATE TABLE STOCK_REPORT_DETAILS (
    ID_STOCK_REPORT VARCHAR(6),
    ID_BOOK INT,
    INITIAL_STOCK DECIMAL(10,2),
    CHANGES DECIMAL(10,2),
    FINAL_STOCK DECIMAL(10,2),
    CONSTRAINT PK_STOCK_REPORT_DETAILS PRIMARY KEY (ID_STOCK_REPORT, ID_BOOK),
    CONSTRAINT FK_STOCK_REPORT_DETAILS_STOCK_REPORT FOREIGN KEY (ID_STOCK_REPORT) REFERENCES STOCK_REPORT(ID_STOCK_REPORT),
    CONSTRAINT FK_STOCK_REPORT_DETAILS_BOOK FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID_BOOK)
);

CREATE TABLE DEBT_REPORT (
    ID_DEBT_REPORT VARCHAR(6),
    REPORT_DATE DATE,
    CONSTRAINT PK_DEBT_REPORT PRIMARY KEY (ID_DEBT_REPORT)
);

CREATE TABLE DEBT_REPORT_DETAILS (
    ID_DEBT_REPORT VARCHAR(6),
    ID_CUSTOMER INT,
    INITIAL_DEBT DECIMAL(10,2),
    CHANGES DECIMAL(10,2),
    FINAL_DEBT DECIMAL(10,2),
    CONSTRAINT PK_DEBT_REPORT_DETAILS PRIMARY KEY (ID_DEBT_REPORT, ID_CUSTOMER),
    CONSTRAINT FK_DEBT_REPORT_DETAILS_DEBT_REPORT FOREIGN KEY (ID_DEBT_REPORT) REFERENCES DEBT_REPORT(ID_DEBT_REPORT),
    CONSTRAINT FK_DEBT_REPORT_DETAILS_CUSTOMER FOREIGN KEY (ID_CUSTOMER) REFERENCES CUSTOMER(ID_CUSTOMER)
);

CREATE TABLE RULES (
    ID_RULE INT PRIMARY KEY AUTO_INCREMENT,
    RULE_NAME VARCHAR(255),
    RULE_VALUE int
);



-- Insert data into BOOK table
INSERT INTO BOOK (BOOK_TITLE, CATEGORY, AUTHOR, QUANTITY) VALUES
('The Alchemist', 'Novel', 'Paulo Coelho', 10),
('When Breath Becomes Air', 'Biography', 'Paul Kalanithi', 5),
('In Search of Lost Time', 'Novel', 'Marcel Proust', 8);

-- Insert data into CUSTOMER table
INSERT INTO CUSTOMER (FULL_NAME, ADDRESS, PHONE, EMAIL, DEBT) VALUES
('Nguyen Van A', 'Hanoi', '0123456789', 'a@gmail.com', 10000.00),
('Tran Thi B', 'Ho Chi Minh City', '0987654321', 'b@gmail.com', 15000.00),
('Le Van C', 'Da Nang', '0112233445', 'c@gmail.com', 5000.00);

-- Insert data into STOCK_RECEIPT table
INSERT INTO STOCK_RECEIPT (ID_STOCK_RECEIPT, RECEIPT_DATE) VALUES
('SR001', '2023-01-15'),
('SR002', '2023-02-20');

-- Insert data into STOCK_RECEIPT_DETAILS table
INSERT INTO STOCK_RECEIPT_DETAILS (ID_STOCK_RECEIPT, ID_BOOK, QUANTITY) VALUES
('SR001', 1, 5),
('SR001', 2, 3),
('SR002', 3, 2);

-- Insert data into INVOICE table
INSERT INTO INVOICE (ID_INVOICE, ID_CUSTOMER, INVOICE_DATE) VALUES
('INV001', 1, '2023-01-20'),
('INV002', 2, '2023-02-25');

-- Insert data into INVOICE_DETAILS table
INSERT INTO INVOICE_DETAILS (ID_INVOICE, ID_BOOK, QUANTITY, UNIT_PRICE) VALUES
('INV001', 1, 2, 200.00),
('INV001', 2, 1, 150.00),
('INV002', 3, 1, 300.00);

-- Insert data into PAYMENT_RECEIPT table
INSERT INTO PAYMENT_RECEIPT (ID_PAYMENT_RECEIPT, ID_CUSTOMER, PAYMENT_DATE, AMOUNT_RECEIVED) VALUES
('PR001', 1, '2023-01-21', 300.00),
('PR002', 2, '2023-02-26', 1500.00);

-- Insert data into STOCK_REPORT table
INSERT INTO STOCK_REPORT (ID_STOCK_REPORT, REPORT_DATE) VALUES
('SR001', '2023-03-01');

-- Insert data into STOCK_REPORT_DETAILS table
INSERT INTO STOCK_REPORT_DETAILS (ID_STOCK_REPORT, ID_BOOK, INITIAL_STOCK, CHANGES, FINAL_STOCK) VALUES
('SR001', 1, 10, -5, 5),
('SR001', 2, 5, -3, 2),
('SR001', 3, 8, 0, 8);

-- Insert data into DEBT_REPORT table
INSERT INTO DEBT_REPORT (ID_DEBT_REPORT, REPORT_DATE) VALUES
('DR001', '2023-03-05');

-- Insert data into DEBT_REPORT_DETAILS table
INSERT INTO DEBT_REPORT_DETAILS (ID_DEBT_REPORT, ID_CUSTOMER, INITIAL_DEBT, CHANGES, FINAL_DEBT) VALUES
('DR001', 1, 10000.00, -300.00, 9700.00),
('DR001', 2, 15000.00, 500.00, 15500.00);



INSERT INTO RULES (RULE_NAME, RULE_VALUE) VALUES ('Max inventory quantity', 300);
INSERT INTO RULES (RULE_NAME, RULE_VALUE) VALUES ('Max debt', 20000);
INSERT INTO RULES (RULE_NAME, RULE_VALUE) VALUES ('Min book quantity after selling', 20);


use book_management;


DROP TRIGGER IF EXISTS check_max_debt;

DELIMITER $$
CREATE TRIGGER check_max_debt
BEFORE UPDATE ON customer
FOR EACH ROW
BEGIN
	DECLARE max_debt decimal(10,2);
    DECLARE debt_curr decimal(10,2);
    
    SELECT CAST(rule_value as UNSIGNED) into max_debt
    from rules
    where rule_name = "Max debt";
    
    SELECT CAST(debt as UNSIGNED) into debt_curr
    from customer
    where id_customer = OLD.id_customer;
    
    if debt_curr > max_debt  then
    SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Lượng tồn kho hiện tại đã lớn hơn hoặc bằng giới hạn cho phép'; 
    END IF;
END $$
    
DELIMITER ;




DROP TRIGGER IF EXISTS check_inventory;
DELIMITER $$

CREATE TRIGGER check_inventory
BEFORE UPDATE ON book
FOR EACH ROW
BEGIN
    DECLARE max_quantity decimal(10,2);


    SELECT CAST(rule_value AS UNSIGNED) INTO max_quantity 
    FROM rules 
    WHERE rule_name = 'Max inventory quantity';

    IF OLD.quantity >= max_quantity THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Lượng tồn kho hiện tại đã lớn hơn hoặc bằng giới hạn cho phép'; 
    END IF;
END $$

DELIMITER ;



drop trigger if exists check_min_inventory_after;

DELIMITER $$

CREATE TRIGGER  check_min_inventory_after
BEFORE UPDATE ON book
FOR EACH ROW
BEGIN
    DECLARE min_inventory_after INT;
    SELECT CAST(rule_value AS UNSIGNED) INTO min_inventory_after
    FROM rules 
    WHERE rule_name = 'Min book quantity after selling';


    IF nwe.quantity < min_inventory_after THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Vui lòng chọn số lượng ít hơn. Số lượng tồn sau khi bán ít nhất là 20.'; 
    END IF;
END $$

DELIMITER ;


drop trigger if exists check_amount_received;

DELIMITER $$

CREATE TRIGGER  check_amount_received
BEFORE UPDATE ON payment_receipt
FOR EACH ROW
BEGIN
	
    DECLARE curr_debt decimal(10,2);
    
    SELECT CAST(debt as UNSIGNED) into curr_debt
	from customer
    where old.id_customer = id_customer;
	
    IF old.amount_received > curr_debt THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Số tiền thu đã vượt quá số tiền khách hàng đang nợ.'; 
    END IF;
END $$

DELIMITER ;

use book_management;
